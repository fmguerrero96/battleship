(()=>{"use strict";const e=e=>{let t=null,r=[];const c=(e,c)=>{c.isValidAttack(e)&&c.receiveAttack(e),r.push(e),t=!1},o=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],l=e=>{const c=o();for(;!e.isValidAttack(c);)c=o;e.receiveAttack(c),r.push(c),t=!1};return{humanPlayerAttack:c,computerPlayerAttack:l,attack:"human"===e?c:l,isMyTurn:t,myAttacks:r}},t=()=>{const e=[],t=[],r=[],c=[];return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:(r,c)=>{const o=(e=>{let t=0,r=!1,c=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===c&&(r=!0),r),hits:t,sunk:r,shipLength:c}})(c),[l,n]=r;for(let t=0;t<c;t++)if(null!==e[l+t][n])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<c;t++)e[l+t][n]=o;t.push(o)},grid:e,ships:t,receiveAttack:t=>{const[o,l]=t;null===e[o][l]?(r.push([o,l]),e[o][l]=0):(e[o][l].hit(),c.push([o,l]))},missedAttacks:r,successfulAttacks:c,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{const[t,o]=e;for(const[e,r]of c)if(e===t&&r===o)return!1;for(const[e,c]of r)if(e===t&&c===o)return!1;return!0}}},r=(e("human"),e("computer"),t()),c=(t(),(e=>{const t=[5,4,3,3,2];let r=0;const c=o=>{const l=o.target.getAttribute("data-coordinate"),[n,s]=JSON.parse(l);for(let e=0;e<t[r];e++)document.querySelector(`.cell[data-coordinate="[${n+e}, ${s}]"]`).className="ship-cell";e.placeShip([n,s],t[r]),r++,r>=t.length&&document.querySelector(".pre-board").removeEventListener("click",c)};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const c=e%10,o=Math.floor(e/10);r.setAttribute("data-coordinate",`[${c}, ${o}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",c)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close()}))}}})(r));c.createCells(".pre-board"),c.createCells(".human"),c.createCells(".computer"),c.insertShip(),c.closeModal()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,