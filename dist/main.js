(()=>{"use strict";const e=e=>{let t=null,r=[];const c=(e,c)=>{c.isValidAttack(e)&&c.receiveAttack(e),r.push(e),t=!1},o=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],l=e=>{let c=o();for(;!e.isValidAttack(c);)c=o();return e.receiveAttack(c),r.push(c),t=!1,c};return{humanPlayerAttack:c,computerPlayerAttack:l,attack:"human"===e?c:l,isMyTurn:t,myAttacks:r}},t=()=>{const e=[],t=[],r=[],c=[],o=(r,c)=>{const o=(e=>{let t=0,r=!1,c=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===c&&(r=!0),r),hits:t,sunk:r,shipLength:c}})(c),[l,a]=r;for(let t=0;t<c;t++)if(null!==e[l+t][a])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<c;t++)e[l+t][a]=o;t.push(o)};return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:o,grid:e,ships:t,receiveAttack:t=>{const[o,l]=t;null===e[o][l]?(r.push([o,l]),e[o][l]=0):(e[o][l].hit(),c.push([o,l]))},placeRandomShips:()=>{const e=[5,4,3,3,2];for(let t=0;t<e.length;t++){let r=!1;for(;!r;){let c=Math.floor(10*Math.random()),l=Math.floor(10*Math.random());try{o([c,l],e[t]),r=!0}catch(e){}}}return t},missedAttacks:r,successfulAttacks:c,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{let[t,o]=e;for(let[e,r]of c)if(e===t&&r===o)return!1;for(const[e,c]of r)if(e===t&&c===o)return!1;return!0},getShips:()=>t,getGrid:()=>e}},r=e("human"),c=e("computer"),o=t(),l=t(),a=((e,t,r,c)=>{const o=[5,4,3,3,2];let l=0;const a=t=>{const r=t.target.getAttribute("data-coordinate"),[c,n]=JSON.parse(r);e.placeShip([c,n],o[l]);for(let e=0;e<o[l];e++)document.querySelector(`.cell[data-coordinate="[${c+e}, ${n}]"]`).className="ship-cell";l++,l>=o.length&&document.querySelector(".pre-board").removeEventListener("click",a)},n=()=>{const e=document.querySelectorAll(".pre-board .ship-cell"),t=document.querySelectorAll(".human .cell"),r=[];for(let t=0;t<e.length;t++)r.push(e[t].getAttribute("data-coordinate"));for(let e=0;e<t.length;e++){let c=t[e],o=t[e].getAttribute("data-coordinate");r.includes(o)&&(c.className="ship-cell")}},s=c=>{const o=c.target,l=o.getAttribute("data-coordinate"),[a,n]=JSON.parse(l);t.attack([a,n],r),0===r.getGrid()[a][n]?o.className="miss":o.className="hit",i(),(e.allShipsSunk()||r.allShipsSunk())&&(document.querySelector(".computer").removeEventListener("click",s),document.querySelector(".gameEnd").showModal(),e.allShipsSunk()?document.querySelector(".winner").textContent="AI Player Wins!":document.querySelector(".winner").textContent="You Win!",document.querySelector(".playAgain").addEventListener("click",(()=>{document.location.reload()})))},i=()=>{let t=c.computerPlayerAttack(e);const[r,o]=t,l=e.getGrid();let a=document.querySelector(`.human .cell[data-coordinate="[${r}, ${o}]"]`);a||(a=document.querySelector(`.human .ship-cell[data-coordinate="[${r}, ${o}]"]`)),0===l[r][o]?a.className="miss":a.className="hit"};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const c=e%10,o=Math.floor(e/10);r.setAttribute("data-coordinate",`[${c}, ${o}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",a)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close(),n()}))},showShips:n,aiAttack:i,showAttack:()=>{document.querySelector(".computer").addEventListener("click",s)}}})(o,r,l,c);a.createCells(".pre-board"),a.closeModal(),a.createCells(".human"),a.createCells(".computer"),l.placeRandomShips(),a.insertShip(),a.showAttack()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,