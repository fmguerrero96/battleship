(()=>{"use strict";const e=e=>{let t=null,r=[];const c=(e,c)=>{c.isValidAttack(e)&&c.receiveAttack(e),r.push(e),t=!1},a=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],o=e=>{const c=a();for(;!e.isValidAttack(c);)c=a;return e.receiveAttack(c),r.push(c),t=!1,c};return{humanPlayerAttack:c,computerPlayerAttack:o,attack:"human"===e?c:o,isMyTurn:t,myAttacks:r}},t=()=>{const e=[],t=[],r=[],c=[],a=(r,c)=>{const a=(e=>{let t=0,r=!1,c=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===c&&(r=!0),r),hits:t,sunk:r,shipLength:c}})(c),[o,l]=r;for(let t=0;t<c;t++)if(null!==e[o+t][l])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<c;t++)e[o+t][l]=a;t.push(a)};return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:a,grid:e,ships:t,receiveAttack:t=>{const[a,o]=t;null===e[a][o]?(r.push([a,o]),e[a][o]=0):(e[a][o].hit(),c.push([a,o]))},placeRandomShips:()=>{const e=[5,4,3,3,2];for(let t=0;t<e.length;t++){let r=!1;for(;!r;){let c=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());try{a([c,o],e[t]),r=!0}catch(e){}}}return t},missedAttacks:r,successfulAttacks:c,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{const[t,a]=e;for(const[e,r]of c)if(e===t&&r===a)return!1;for(const[e,c]of r)if(e===t&&c===a)return!1;return!0},getShips:()=>t,getGrid:()=>e}},r=e("human"),c=e("computer"),a=t(),o=t(),l=((e,t,r,c)=>{const a=[5,4,3,3,2];let o=0;const l=t=>{const r=t.target.getAttribute("data-coordinate"),[c,s]=JSON.parse(r);e.placeShip([c,s],a[o]);for(let e=0;e<a[o];e++)document.querySelector(`.cell[data-coordinate="[${c+e}, ${s}]"]`).className="ship-cell";o++,o>=a.length&&document.querySelector(".pre-board").removeEventListener("click",l)},s=()=>{const e=document.querySelectorAll(".pre-board .ship-cell"),t=document.querySelectorAll(".human .cell"),r=[];for(let t=0;t<e.length;t++)r.push(e[t].getAttribute("data-coordinate"));for(let e=0;e<t.length;e++){let c=t[e],a=t[e].getAttribute("data-coordinate");r.includes(a)&&(c.className="ship-cell")}},n=e=>{const c=e.target,a=c.getAttribute("data-coordinate"),[o,l]=JSON.parse(a);r.attack([o,l],t),0===t.getGrid()[o][l]?c.className="miss":c.className="hit"};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const c=e%10,a=Math.floor(e/10);r.setAttribute("data-coordinate",`[${c}, ${a}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",l)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close(),s()}))},showShips:s,showAttack:()=>{document.querySelector(".computer").addEventListener("click",n)},aiAttack:()=>{const t=c.attack(e),[r,a]=t,o=e.getGrid(),l=document.querySelector(`.human .cell[data-coordinate="[${r}, ${a}]"`);0===o[r][a]?l.className="miss":l.className="hit"}}})(a,o,r,c);l.createCells(".pre-board"),l.createCells(".human"),l.createCells(".computer"),o.placeRandomShips(),l.insertShip(),l.closeModal(),l.showAttack(),((e,t,r,c)=>{r.isMyTurn=!0,c.isMyTurn=!1})(0,0,r,c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,