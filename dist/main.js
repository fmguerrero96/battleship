(()=>{"use strict";const e=e=>{let t=null,r=[];const o=(e,o)=>{o.isValidAttack(e)&&o.receiveAttack(e),r.push(e),t=!1},c=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],l=e=>{const o=c();for(;!e.isValidAttack(o);)o=c;e.receiveAttack(o),r.push(o),t=!1};return{humanPlayerAttack:o,computerPlayerAttack:l,attack:"human"===e?o:l,isMyTurn:t,myAttacks:r}},t=()=>{const e=[],t=[],r=[],o=[],c=(r,o)=>{const c=(e=>{let t=0,r=!1,o=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===o&&(r=!0),r),hits:t,sunk:r,shipLength:o}})(o),[l,a]=r;for(let t=0;t<o;t++)if(null!==e[l+t][a])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<o;t++)e[l+t][a]=c;t.push(c)};return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:c,grid:e,ships:t,receiveAttack:t=>{const[c,l]=t;null===e[c][l]?(r.push([c,l]),e[c][l]=0):(e[c][l].hit(),o.push([c,l]))},placeRandomShips:()=>{const e=[5,4,3,3,2];for(let t=0;t<e.length;t++){let r=!1;for(;!r;){let o=Math.floor(10*Math.random()),l=Math.floor(10*Math.random());try{c([o,l],e[t]),r=!0}catch(e){}}}return t},missedAttacks:r,successfulAttacks:o,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{const[t,c]=e;for(const[e,r]of o)if(e===t&&r===c)return!1;for(const[e,o]of r)if(e===t&&o===c)return!1;return!0},getShips:()=>t,getGrid:()=>e}},r=(e("human"),e("computer"),t());t().placeRandomShips();const o=(e=>{const t=[5,4,3,3,2];let r=0;const o=c=>{const l=c.target.getAttribute("data-coordinate"),[a,n]=JSON.parse(l);e.placeShip([a,n],t[r]);for(let e=0;e<t[r];e++)document.querySelector(`.cell[data-coordinate="[${a+e}, ${n}]"]`).className="ship-cell";r++,r>=t.length&&document.querySelector(".pre-board").removeEventListener("click",o)};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const o=e%10,c=Math.floor(e/10);r.setAttribute("data-coordinate",`[${o}, ${c}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",o)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close()}))}}})(r);o.createCells(".pre-board"),o.createCells(".human"),o.createCells(".computer"),o.insertShip(),o.closeModal()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,