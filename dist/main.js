(()=>{"use strict";const e=e=>{let t=null,r=[];const c=(e,c)=>{c.isValidAttack(e)&&c.receiveAttack(e),r.push(e),t=!1},o=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],n=e=>{const c=o();for(;!e.isValidAttack(c);)c=o;e.receiveAttack(c),r.push(c),t=!1};return{humanPlayerAttack:c,computerPlayerAttack:n,attack:"human"===e?c:n,isMyTurn:t,myAttacks:r}},t=()=>{const e=[],t=[],r=[],c=[];return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:(r,c)=>{const o=(e=>{let t=0,r=!1,c=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===c&&(r=!0),r),hits:t,sunk:r,shipLength:c}})(c),[n,l]=r;for(let t=0;t<c;t++)if(null!==e[n][l+t])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<c;t++)e[n+t][l]=o;t.push(o)},grid:e,ships:t,receiveAttack:t=>{const[o,n]=t;null===e[o][n]?(r.push([o,n]),e[o][n]=0):(e[o][n].hit(),c.push([o,n]))},missedAttacks:r,successfulAttacks:c,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{const[t,o]=e;for(const[e,r]of c)if(e===t&&r===o)return!1;for(const[e,c]of r)if(e===t&&c===o)return!1;return!0}}},r=(e("human"),e("computer"),t()),c=(t(),(e=>{const t=[5,4,3,3,2];let r=0;const c=o=>{const n=o.target.getAttribute("data-coordinate"),[l,s]=JSON.parse(n);e.placeShip([l,s],t[r]),r++,console.log(r),r>=t.length&&document.querySelector(".pre-board").removeEventListener("click",c)};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const c=e%10,o=Math.floor(e/10);r.setAttribute("data-coordinate",`[${c}, ${o}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",c)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close()}))}}})(r));c.createCells(".pre-board"),c.createCells(".human"),c.createCells(".computer"),c.insertShip(),c.closeModal()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,