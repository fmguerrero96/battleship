(()=>{"use strict";const e=e=>{let t=null,r=[];const c=(e,c)=>{c.isValidAttack(e)&&c.receiveAttack(e),r.push(e),t=!1},a=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],l=e=>{let c=a();for(;!e.isValidAttack(c);)c=a();return e.receiveAttack(c),r.push(c),t=!1,c};return{humanPlayerAttack:c,computerPlayerAttack:l,attack:"human"===e?c:l,isMyTurn:t,myAttacks:r}},t=()=>{const e=[],t=[],r=[],c=[],a=(r,c)=>{const a=(e=>{let t=0,r=!1,c=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===c&&(r=!0),r),hits:t,sunk:r,shipLength:c}})(c),[l,o]=r;for(let t=0;t<c;t++)if(null!==e[l+t][o])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<c;t++)e[l+t][o]=a;t.push(a)};return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:a,grid:e,ships:t,receiveAttack:t=>{const[a,l]=t;null===e[a][l]?(r.push([a,l]),e[a][l]=0):(e[a][l].hit(),c.push([a,l]))},placeRandomShips:()=>{const e=[5,4,3,3,2];for(let t=0;t<e.length;t++){let r=!1;for(;!r;){let c=Math.floor(10*Math.random()),l=Math.floor(10*Math.random());try{a([c,l],e[t]),r=!0}catch(e){}}}return t},missedAttacks:r,successfulAttacks:c,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{let[t,a]=e;for(let[e,r]of c)if(e===t&&r===a)return!1;for(const[e,c]of r)if(e===t&&c===a)return!1;return!0},getShips:()=>t,getGrid:()=>e}},r=e("human"),c=e("computer"),a=t(),l=t(),o=((e,t,r,c)=>{const a=[5,4,3,3,2];let l=0;const o=t=>{const r=t.target.getAttribute("data-coordinate"),[c,n]=JSON.parse(r);e.placeShip([c,n],a[l]);for(let e=0;e<a[l];e++)document.querySelector(`.cell[data-coordinate="[${c+e}, ${n}]"]`).className="ship-cell";l++,l>=a.length&&document.querySelector(".pre-board").removeEventListener("click",o)},n=()=>{const e=document.querySelectorAll(".pre-board .ship-cell"),t=document.querySelectorAll(".human .cell"),r=[];for(let t=0;t<e.length;t++)r.push(e[t].getAttribute("data-coordinate"));for(let e=0;e<t.length;e++){let c=t[e],a=t[e].getAttribute("data-coordinate");r.includes(a)&&(c.className="ship-cell")}};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const c=e%10,a=Math.floor(e/10);r.setAttribute("data-coordinate",`[${c}, ${a}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",o)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close(),n()}))},showShips:n,aiAttack:()=>{let t=c.computerPlayerAttack(e);const[r,a]=t,l=e.getGrid();let o=document.querySelector(`.human .cell[data-coordinate="[${r}, ${a}]"]`);o||(o=document.querySelector(`.human .ship-cell[data-coordinate="[${r}, ${a}]"]`)),0===l[r][a]?o.className="miss":o.className="hit"}}})(a,0,0,c);o.createCells(".pre-board"),o.closeModal(),o.createCells(".human"),o.createCells(".computer"),l.placeRandomShips(),o.insertShip();const n=async()=>{let e="human";for(;!a.allShipsSunk()&&!l.allShipsSunk();){if("human"===e){const t=document.querySelector(".computer"),c=a=>{const o=a.target,s=o.getAttribute("data-coordinate"),[i,u]=JSON.parse(s);r.attack([i,u],l),0===l.getGrid()[i][u]?o.className="miss":o.className="hit",t.removeEventListener("click",c),e="computer",n()};t.addEventListener("click",c)}await new Promise((e=>setTimeout(e,500))),"computer"===e&&(o.aiAttack(),e="human")}};document.querySelector(".begin").addEventListener("click",(()=>{n()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,