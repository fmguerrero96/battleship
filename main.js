(()=>{"use strict";const e=e=>{let t=null,r=[];const o=(e,o)=>{o.isValidAttack(e)&&o.receiveAttack(e),r.push(e),t=!1},c=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],l=e=>{const o=c();for(;!e.isValidAttack(o);)o=c;e.receiveAttack(o),r.push(o),t=!1};return{humanPlayerAttack:o,computerPlayerAttack:l,attack:"human"===e?o:l,isMyTurn:t,myAttacks:r}},t=()=>{const e=[],t=[],r=[],o=[],c=(r,o)=>{const c=(e=>{let t=0,r=!1,o=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===o&&(r=!0),r),hits:t,sunk:r,shipLength:o}})(o),[l,a]=r;for(let t=0;t<o;t++)if(null!==e[l+t][a])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<o;t++)e[l+t][a]=c;t.push(c)};return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:c,grid:e,ships:t,receiveAttack:t=>{const[c,l]=t;null===e[c][l]?(r.push([c,l]),e[c][l]=0):(e[c][l].hit(),o.push([c,l]))},placeRandomShips:()=>{const e=[5,4,3,3,2];for(let t=0;t<e.length;t++){let r=!1;for(;!r;){let o=Math.floor(10*Math.random()),l=Math.floor(10*Math.random());try{c([o,l],e[t]),r=!0}catch(e){}}}return t},missedAttacks:r,successfulAttacks:o,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{const[t,c]=e;for(const[e,r]of o)if(e===t&&r===c)return!1;for(const[e,o]of r)if(e===t&&o===c)return!1;return!0},getShips:()=>t,getGrid:()=>e}},r=e("human"),o=(e("computer"),t()),c=t(),l=((e,t,r,o)=>{const c=[5,4,3,3,2];let l=0;const a=t=>{const r=t.target.getAttribute("data-coordinate"),[o,s]=JSON.parse(r);e.placeShip([o,s],c[l]);for(let e=0;e<c[l];e++)document.querySelector(`.cell[data-coordinate="[${o+e}, ${s}]"]`).className="ship-cell";l++,l>=c.length&&document.querySelector(".pre-board").removeEventListener("click",a)},s=()=>{const e=document.querySelectorAll(".pre-board .ship-cell"),t=document.querySelectorAll(".human .cell"),r=[];for(let t=0;t<e.length;t++)r.push(e[t].getAttribute("data-coordinate"));for(let e=0;e<t.length;e++){let o=t[e],c=t[e].getAttribute("data-coordinate");r.includes(c)&&(o.className="ship-cell")}},n=e=>{const o=e.target,c=o.getAttribute("data-coordinate"),[l,a]=JSON.parse(c);r.attack([l,a],t);const s=t.getGrid();console.log(s),0===s[l][a]?o.className="miss":o.className="hit"};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const o=e%10,c=Math.floor(e/10);r.setAttribute("data-coordinate",`[${o}, ${c}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",a)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close(),s()}))},showShips:s,showAttack:()=>{document.querySelector(".computer").addEventListener("click",n)}}})(o,c,r);l.createCells(".pre-board"),l.createCells(".human"),l.createCells(".computer"),c.placeRandomShips(),l.insertShip(),l.closeModal(),l.showAttack()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,