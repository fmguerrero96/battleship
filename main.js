(()=>{"use strict";var e={974:(e,t,r)=>{r.d(t,{Z:()=>c});var o=r(484);e=r.hmd(e);const n=()=>{const e=[],t=[],r=[],n=[],c=(r,n)=>{const c=(0,o.Z)(n),[a,s]=r;for(let t=0;t<n;t++)if(null!==e[a+t][s])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<n;t++)e[a+t][s]=c;t.push(c)};return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:c,grid:e,ships:t,receiveAttack:t=>{const[o,c]=t;null===e[o][c]?(r.push([o,c]),e[o][c]=0):(e[o][c].hit(),n.push([o,c]))},placeRandomShips:()=>{const e=[5,4,3,3,2];for(let t=0;t<e.length;t++){let r=!1;for(;!r;){let o=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());try{c([o,n],e[t]),r=!0}catch(e){}}}return t},missedAttacks:r,successfulAttacks:n,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{const[t,o]=e;for(const[e,r]of n)if(e===t&&r===o)return!1;for(const[e,n]of r)if(e===t&&n===o)return!1;return!0},getShips:()=>t,getGrid:()=>e}},c=n;e.exports=n},753:(e,t,r)=>{r.d(t,{Z:()=>n}),e=r.hmd(e);const o=e=>{let t=null,r=[];const o=(e,o)=>{o.isValidAttack(e)&&o.receiveAttack(e),r.push(e),t=!1},n=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],c=e=>{const o=n();for(;!e.isValidAttack(o);)o=n;e.receiveAttack(o),r.push(o),t=!1};return{humanPlayerAttack:o,computerPlayerAttack:c,attack:"human"===e?o:c,isMyTurn:t,myAttacks:r}},n=o;e.exports=o},484:(e,t,r)=>{r.d(t,{Z:()=>n}),e=r.hmd(e);const o=e=>{let t=0,r=!1,o=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===o&&(r=!0),r),hits:t,sunk:r,shipLength:o}},n=o;e.exports=o}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var c=t[o]={id:o,loaded:!1,exports:{}};return e[o](c,c.exports,r),c.loaded=!0,c.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=r(753),t=r(974);(0,e.Z)("human"),(0,e.Z)("computer");const o=(0,t.Z)(),n=((0,t.Z)(),(e=>{const t=[5,4,3,3,2];let r=0;const o=n=>{const c=n.target.getAttribute("data-coordinate"),[a,s]=JSON.parse(c);for(let e=0;e<t[r];e++)document.querySelector(`.cell[data-coordinate="[${a+e}, ${s}]"]`).className="ship-cell";e.placeShip([a,s],t[r]),r++,r>=t.length&&document.querySelector(".pre-board").removeEventListener("click",o)};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const o=e%10,n=Math.floor(e/10);r.setAttribute("data-coordinate",`[${o}, ${n}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",o)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close()}))}}})(o));n.createCells(".pre-board"),n.createCells(".human"),n.createCells(".computer"),n.insertShip(),n.closeModal()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNmLE1BQU1DLEVBQVFqQixTQUFTQyxjQUFjLFVBQy9CaUIsRUFBZ0JsQixTQUFTQyxjQUFjLGtCQUM3Q2dCLEVBQU1GLGlCQUFpQixTQUFTLEtBQzVCRyxFQUFjQyxPQUFNLEdBQ3ZCLEVBSVIsRUQ1Q2lCLENBQU83QixJQUV6QkUsRUFBVVksWUFBWSxjQUN0QlosRUFBVVksWUFBWSxVQUN0QlosRUFBVVksWUFBWSxhQUV0QlosRUFBVXNCLGFBQ1Z0QixFQUFVd0IsWSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvc2hpcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2RvbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2hpcEZhY3RvcnkgZnJvbSAnLi9zaGlwcydcblxuY29uc3QgZ2FtZWJvYXJkRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBncmlkID0gW11cbiAgICBjb25zdCBzaGlwcyA9IFtdXG4gICAgY29uc3QgbWlzc2VkQXR0YWNrcyA9IFtdXG4gICAgY29uc3Qgc3VjY2Vzc2Z1bEF0dGFja3MgPSBbXVxuXG4gICAgY29uc3QgcG9wdWxhdGVHcmlkID0gKCkgPT4ge1xuICAgICAgICBsZXQgcm93cyA9IDEwXG4gICAgICAgIGxldCBjb2xzID0gMTBcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKyl7XG4gICAgICAgICAgICBncmlkW2ldID0gW107XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgY29sczsgaisrKXtcbiAgICAgICAgICAgICAgICBncmlkW2ldW2pdID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcGxhY2VTaGlwID0gKGNvb3JkaW5hdGVzLCBzaGlwTGVuZ3RoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNoaXAgPSBzaGlwRmFjdG9yeShzaGlwTGVuZ3RoKVxuICAgICAgICBjb25zdCBbeCwgeV0gPSBjb29yZGluYXRlcztcbiAgICAgICAgXG4gICAgICAgIGZvcihsZXQgaSA9MDsgaSA8IHNoaXBMZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBpZihncmlkW3ggKyBpXVt5XSAhPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcGxhY2Ugc2hpcCBvbiBhbiBvY2N1cGllZCBzcG90JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgZ3JpZFt4ICsgaV1beV0gPSBzaGlwO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hpcHMucHVzaChzaGlwKVxuICAgIH1cblxuICAgIGNvbnN0IHBsYWNlUmFuZG9tU2hpcHMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNoaXBMZW5ndGhzID0gWzUsIDQsIDMsIDMsIDJdO1xuICAgICAgICBcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGhzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBwbGFjZWQgPSBmYWxzZVxuICAgICAgICAgICAgd2hpbGUoIXBsYWNlZCl7XG4gICAgICAgICAgICAgICAgbGV0IHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgICAgICAgICAgICAgICBsZXQgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlU2hpcChbeCx5XSwgc2hpcExlbmd0aHNbaV0pXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlZCA9IHRydWVcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcil7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNoaXBzXG4gICAgICB9O1xuXG4gICAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChjb29yZGluYXRlcykgPT4ge1xuICAgICAgICBjb25zdCBbeCx5XSA9IGNvb3JkaW5hdGVzXG4gICAgICAgIGlmKGdyaWRbeF1beV0gPT09IG51bGwpe1xuICAgICAgICAgICAgbWlzc2VkQXR0YWNrcy5wdXNoKFt4LHldKVxuICAgICAgICAgICAgZ3JpZFt4XVt5XSA9IDAgLy8wIHdpbGwgaW5kaWNhdGUgYSBncmlkIHBvc2l0aW9uIHRoYXQgd2FzIGF0dGFja2VkIGFuZCBtaXNzZWRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBzaGlwID0gZ3JpZFt4XVt5XVxuICAgICAgICAgICAgc2hpcC5oaXQoKVxuICAgICAgICAgICAgc3VjY2Vzc2Z1bEF0dGFja3MucHVzaChbeCx5XSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGdldFNoaXBzID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc2hpcHNcbiAgICB9XG5cbiAgICBjb25zdCBnZXRHcmlkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gZ3JpZFxuICAgIH1cblxuICAgIGNvbnN0IGFsbFNoaXBzU3VuayA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHNoaXBzLmV2ZXJ5KChzaGlwKSA9PiBzaGlwLmlzU3VuaygpKVxuICAgIH1cblxuICAgIGNvbnN0IGlzVmFsaWRBdHRhY2sgPSAoY29vcmRpbmF0ZXMpID0+IHtcbiAgICAgICAgY29uc3QgW3gsIHldID0gY29vcmRpbmF0ZXM7XG4gICAgICAgIGZvciAoY29uc3QgW2F0dGFja1gsIGF0dGFja1ldIG9mIHN1Y2Nlc3NmdWxBdHRhY2tzKSB7XG4gICAgICAgICAgICBpZiAoYXR0YWNrWCA9PT0geCAmJiBhdHRhY2tZID09PSB5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2F0dGFja1gsIGF0dGFja1ldIG9mIG1pc3NlZEF0dGFja3MpIHtcbiAgICAgICAgICAgIGlmIChhdHRhY2tYID09PSB4ICYmIGF0dGFja1kgPT09IHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwb3B1bGF0ZUdyaWQoKVxuXG4gICAgcmV0dXJue3BsYWNlU2hpcCwgZ3JpZCwgc2hpcHMsIHJlY2VpdmVBdHRhY2ssIHBsYWNlUmFuZG9tU2hpcHMsIFxuICAgICAgICBtaXNzZWRBdHRhY2tzLCBzdWNjZXNzZnVsQXR0YWNrcywgYWxsU2hpcHNTdW5rLCBpc1ZhbGlkQXR0YWNrLCBcbiAgICAgICAgZ2V0U2hpcHMsIGdldEdyaWR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2FtZWJvYXJkRmFjdG9yeVxubW9kdWxlLmV4cG9ydHMgPSBnYW1lYm9hcmRGYWN0b3J5IiwiY29uc3QgcGxheWVyRmFjdG9yeSA9IChwbGF5ZXJUeXBlKSA9PiB7XG4gICAgbGV0IGlzTXlUdXJuID0gbnVsbFxuICAgIGxldCBteUF0dGFja3MgPSBbXVxuXG4gICAgY29uc3QgaHVtYW5QbGF5ZXJBdHRhY2sgPSAoY29vcmRpbmF0ZXMsIGJvYXJkKSA9PiB7XG4gICAgICAgIGlmIChib2FyZC5pc1ZhbGlkQXR0YWNrKGNvb3JkaW5hdGVzKSl7XG4gICAgICAgICAgICBib2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGVzKVxuICAgICAgICB9XG4gICAgICAgIG15QXR0YWNrcy5wdXNoKGNvb3JkaW5hdGVzKVxuICAgICAgICBpc015VHVybiA9IGZhbHNlXG4gICAgfVxuXG4gICAgY29uc3QgZ2V0UmFuZG9tQ29vcmRpbmF0ZXMgPSAoKSA9PiB7XG4gICAgICAgIGxldCB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgIGxldCB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgIHJldHVybiBbeCwgeV1cbiAgICB9XG5cbiAgICBjb25zdCBjb21wdXRlclBsYXllckF0dGFjayA9IChib2FyZCkgPT4ge1xuICAgICAgICBjb25zdCBjb29yZGluYXRlcyA9IGdldFJhbmRvbUNvb3JkaW5hdGVzKClcbiAgICAgICAgd2hpbGUoIWJvYXJkLmlzVmFsaWRBdHRhY2soY29vcmRpbmF0ZXMpKXtcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzID0gZ2V0UmFuZG9tQ29vcmRpbmF0ZXNcbiAgICAgICAgfVxuICAgICAgICBib2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkaW5hdGVzKVxuICAgICAgICBteUF0dGFja3MucHVzaChjb29yZGluYXRlcylcbiAgICAgICAgaXNNeVR1cm4gPSBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGF0dGFjayA9IHBsYXllclR5cGUgPT09IFwiaHVtYW5cIiA/IGh1bWFuUGxheWVyQXR0YWNrIDogY29tcHV0ZXJQbGF5ZXJBdHRhY2s7XG5cbiAgICByZXR1cm57aHVtYW5QbGF5ZXJBdHRhY2ssIGNvbXB1dGVyUGxheWVyQXR0YWNrLCBhdHRhY2ssIGlzTXlUdXJuLFxuICAgICAgICAgICBteUF0dGFja3N9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXllckZhY3Rvcnlcbm1vZHVsZS5leHBvcnRzID0gcGxheWVyRmFjdG9yeSIsImNvbnN0IHNoaXBGYWN0b3J5ID0gKGxlbmd0aCkgPT4ge1xuICAgIGxldCBoaXRzID0gMCBcbiAgICBsZXQgc3VuayA9IGZhbHNlXG4gICAgbGV0IHNoaXBMZW5ndGggPSBsZW5ndGhcblxuICAgIGNvbnN0IGhpdCA9ICgpID0+IHtcbiAgICAgICAgaGl0cyArPSAxXG4gICAgICAgIHJldHVybiBoaXRzXG4gICAgfVxuXG4gICAgY29uc3QgaXNTdW5rID0gKCkgPT4ge1xuICAgICAgICBpZihoaXRzID09PSBzaGlwTGVuZ3RoKXtcbiAgICAgICAgICAgIHN1bmsgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1bmtcbiAgICB9XG5cbiAgICByZXR1cm4ge2hpdCwgaXNTdW5rLCBoaXRzLCBzdW5rLCBzaGlwTGVuZ3RofVxufVxuZXhwb3J0IGRlZmF1bHQgc2hpcEZhY3Rvcnlcbm1vZHVsZS5leHBvcnRzID0gc2hpcEZhY3RvcnkiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgZXZlbnRzIGZyb20gXCIuL21vZHVsZXMvZG9tXCI7XG5pbXBvcnQgcGxheWVyRmFjdG9yeSBmcm9tIFwiLi9tb2R1bGVzL3BsYXllclwiXG5pbXBvcnQgZ2FtZWJvYXJkRmFjdG9yeSBmcm9tIFwiLi9tb2R1bGVzL2dhbWVib2FyZFwiXG5cbmNvbnN0IGh1bWFuUGxheWVyID0gcGxheWVyRmFjdG9yeSgnaHVtYW4nKVxuY29uc3QgYWlQbGF5ZXIgPSBwbGF5ZXJGYWN0b3J5KCdjb21wdXRlcicpXG5cbmNvbnN0IGh1bWFuR2FtZWJvYXJkID0gZ2FtZWJvYXJkRmFjdG9yeSgpXG5jb25zdCBhaUdhbWVib2FyZCA9IGdhbWVib2FyZEZhY3RvcnkoKVxuXG5jb25zdCBkb21FdmVudHMgPSBldmVudHMoaHVtYW5HYW1lYm9hcmQpXG5cbmRvbUV2ZW50cy5jcmVhdGVDZWxscygnLnByZS1ib2FyZCcpXG5kb21FdmVudHMuY3JlYXRlQ2VsbHMoJy5odW1hbicpXG5kb21FdmVudHMuY3JlYXRlQ2VsbHMoJy5jb21wdXRlcicpXG5cbmRvbUV2ZW50cy5pbnNlcnRTaGlwKClcbmRvbUV2ZW50cy5jbG9zZU1vZGFsKCkiLCJjb25zdCBldmVudHMgPSAoKGJvYXJkKSA9PiB7XG4gICAgY29uc3Qgc2hpcExlbmd0aHMgPSBbNSwgNCwgMywgMywgMl07XG4gICAgbGV0IHRoaXNTaGlwID0gMFxuXG4gICAgY29uc3QgY3JlYXRlQ2VsbHMgPSAoY29udGFpbmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpbWVuc2lvbnMgPSAxMFxuICAgICAgICBjb25zdCBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKVxuICAgICAgICBib2FyZC5zdHlsZS5ncmlkVGVtcGxhdGVDb2x1bW5zID0gYHJlcGVhdCgke2RpbWVuc2lvbnN9LCAxZnIpYDtcbiAgICAgICAgYm9hcmQuc3R5bGUuZ3JpZFRlbXBsYXRlUm93cyA9IGByZXBlYXQoJHtkaW1lbnNpb25zfSwgMWZyKWA7XG4gICAgXG4gICAgICAgIGxldCBudW1EaXZzID0gZGltZW5zaW9ucyAqIGRpbWVuc2lvbnM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRGl2czsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7IFxuICAgICAgICAgICAgY2VsbC5jbGFzc05hbWUgPSAnY2VsbCdcbiAgICAgICAgICAgIGNvbnN0IHggPSBpICUgZGltZW5zaW9uczsgLy8gQ2FsY3VsYXRlIHggY29vcmRpbmF0ZVxuICAgICAgICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IoaSAvIGRpbWVuc2lvbnMpOyAvLyBDYWxjdWxhdGUgeSBjb29yZGluYXRlXG4gICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1jb29yZGluYXRlJywgYFske3h9LCAke3l9XWApXG4gICAgICAgICAgICBib2FyZC5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJiZWZvcmVlbmRcIiwgY2VsbClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJldHJpZXZlQ29vcmRpbmF0ZXMgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2xpY2tlZENlbGwgPSBldmVudC50YXJnZXRcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZXMgPSBjbGlja2VkQ2VsbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29vcmRpbmF0ZScpXG4gICAgICAgIGNvbnN0IFt4LCB5XSA9IEpTT04ucGFyc2UoY29vcmRpbmF0ZXMpXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3Roc1t0aGlzU2hpcF07IGkrKyl7XG4gICAgICAgICAgICBsZXQgc2hpcENlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuY2VsbFtkYXRhLWNvb3JkaW5hdGU9XCJbJHt4K2l9LCAke3l9XVwiXWApXG4gICAgICAgICAgICBzaGlwQ2VsbC5jbGFzc05hbWUgPSAnc2hpcC1jZWxsJ1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBib2FyZC5wbGFjZVNoaXAoW3gsIHldLHNoaXBMZW5ndGhzW3RoaXNTaGlwXSlcbiAgICAgICAgdGhpc1NoaXArK1xuXG4gICAgICAgIGlmICh0aGlzU2hpcCA+PSBzaGlwTGVuZ3Rocy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZUJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByZS1ib2FyZCcpO1xuICAgICAgICAgICAgcHJlQm9hcmQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZXRyaWV2ZUNvb3JkaW5hdGVzKTtcbiAgICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaW5zZXJ0U2hpcCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJlQm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJlLWJvYXJkJylcbiAgICAgICAgcHJlQm9hcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAocmV0cmlldmVDb29yZGluYXRlcykpXG4gICAgfVxuXG4gICAgY29uc3QgY2xvc2VNb2RhbCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgYmVnaW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmVnaW4nKVxuICAgICAgICBjb25zdCB3ZWxjb21lU2NyZWVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndlbGNvbWVTY3JlZW4nKVxuICAgICAgICBiZWdpbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHdlbGNvbWVTY3JlZW4uY2xvc2UoKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiB7Y3JlYXRlQ2VsbHMsIGluc2VydFNoaXAsIGNsb3NlTW9kYWx9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZXZlbnRzIl0sIm5hbWVzIjpbImdhbWVib2FyZEZhY3RvcnkiLCJncmlkIiwic2hpcHMiLCJtaXNzZWRBdHRhY2tzIiwic3VjY2Vzc2Z1bEF0dGFja3MiLCJwbGFjZVNoaXAiLCJjb29yZGluYXRlcyIsInNoaXBMZW5ndGgiLCJzaGlwIiwieCIsInkiLCJpIiwiRXJyb3IiLCJwdXNoIiwiaiIsInBvcHVsYXRlR3JpZCIsInJlY2VpdmVBdHRhY2siLCJoaXQiLCJwbGFjZVJhbmRvbVNoaXBzIiwic2hpcExlbmd0aHMiLCJsZW5ndGgiLCJwbGFjZWQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJlcnJvciIsImFsbFNoaXBzU3VuayIsImV2ZXJ5IiwiaXNTdW5rIiwiaXNWYWxpZEF0dGFjayIsImF0dGFja1giLCJhdHRhY2tZIiwiZ2V0U2hpcHMiLCJnZXRHcmlkIiwibW9kdWxlIiwiZXhwb3J0cyIsInBsYXllckZhY3RvcnkiLCJwbGF5ZXJUeXBlIiwiaXNNeVR1cm4iLCJteUF0dGFja3MiLCJodW1hblBsYXllckF0dGFjayIsImJvYXJkIiwiZ2V0UmFuZG9tQ29vcmRpbmF0ZXMiLCJjb21wdXRlclBsYXllckF0dGFjayIsImF0dGFjayIsInNoaXBGYWN0b3J5IiwiaGl0cyIsInN1bmsiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJpZCIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJobWQiLCJjcmVhdGUiLCJjaGlsZHJlbiIsInNldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJwbGF5ZXIiLCJodW1hbkdhbWVib2FyZCIsImdhbWVib2FyZCIsImRvbUV2ZW50cyIsInRoaXNTaGlwIiwicmV0cmlldmVDb29yZGluYXRlcyIsImV2ZW50IiwidGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwiSlNPTiIsInBhcnNlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NOYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNyZWF0ZUNlbGxzIiwiY29udGFpbmVyIiwic3R5bGUiLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwiZ3JpZFRlbXBsYXRlUm93cyIsImRpbWVuc2lvbnMiLCJjZWxsIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImluc2VydEFkamFjZW50RWxlbWVudCIsImluc2VydFNoaXAiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xvc2VNb2RhbCIsImJlZ2luIiwid2VsY29tZVNjcmVlbiIsImNsb3NlIl0sInNvdXJjZVJvb3QiOiIifQ==