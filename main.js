(()=>{"use strict";const e=e=>{let t=null,r=[];const o=(e,o)=>{o.isValidAttack(e)&&o.receiveAttack(e),r.push(e),t=!1},l=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],c=e=>{const o=l();for(;!e.isValidAttack(o);)o=l;e.receiveAttack(o),r.push(o),t=!1};return{humanPlayerAttack:o,computerPlayerAttack:c,attack:"human"===e?o:c,isMyTurn:t,myAttacks:r}},t=()=>{const e=[],t=[],r=[],o=[],l=(r,o)=>{const l=(e=>{let t=0,r=!1,o=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===o&&(r=!0),r),hits:t,sunk:r,shipLength:o}})(o),[c,a]=r;for(let t=0;t<o;t++)if(null!==e[c+t][a])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<o;t++)e[c+t][a]=l;t.push(l)};return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:l,grid:e,ships:t,receiveAttack:t=>{const[l,c]=t;null===e[l][c]?(r.push([l,c]),e[l][c]=0):(e[l][c].hit(),o.push([l,c]))},placeRandomShips:()=>{const e=[5,4,3,3,2];for(let t=0;t<e.length;t++){let r=!1;for(;!r;){let o=Math.floor(10*Math.random()),c=Math.floor(10*Math.random());try{l([o,c],e[t]),r=!0}catch(e){}}}return t},missedAttacks:r,successfulAttacks:o,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{const[t,l]=e;for(const[e,r]of o)if(e===t&&r===l)return!1;for(const[e,o]of r)if(e===t&&o===l)return!1;return!0},getShips:()=>t,getGrid:()=>e}},r=(e("human"),e("computer"),t());t().placeRandomShips();const o=(e=>{const t=[5,4,3,3,2];let r=0;const o=l=>{const c=l.target.getAttribute("data-coordinate"),[a,n]=JSON.parse(c);e.placeShip([a,n],t[r]);for(let e=0;e<t[r];e++)document.querySelector(`.cell[data-coordinate="[${a+e}, ${n}]"]`).className="ship-cell";r++,r>=t.length&&document.querySelector(".pre-board").removeEventListener("click",o)},l=()=>{const e=document.querySelectorAll(".pre-board .ship-cell"),t=document.querySelectorAll(".human .cell"),r=[];for(let t=0;t<e.length;t++)r.push(e[t].getAttribute("data-coordinate"));for(let e=0;e<t.length;e++){let o=t[e],l=t[e].getAttribute("data-coordinate");r.includes(l)&&(o.className="ship-cell")}};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const o=e%10,l=Math.floor(e/10);r.setAttribute("data-coordinate",`[${o}, ${l}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",o)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close(),l()}))},showShips:l}})(r);o.createCells(".pre-board"),o.createCells(".human"),o.createCells(".computer"),o.insertShip(),o.closeModal()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,