(()=>{"use strict";const e=e=>{let t=null,r=[];const a=(e,a)=>{a.isValidAttack(e)&&a.receiveAttack(e),r.push(e),t=!1},c=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],l=e=>{let a=c();for(;!e.isValidAttack(a);)a=c;return e.receiveAttack(a),r.push(a),t=!1,a};return{humanPlayerAttack:a,computerPlayerAttack:l,attack:"human"===e?a:l,isMyTurn:t,myAttacks:r}},t=()=>{const e=[],t=[],r=[],a=[],c=(r,a)=>{const c=(e=>{let t=0,r=!1,a=e;return{hit:()=>(t+=1,t),isSunk:()=>(t===a&&(r=!0),r),hits:t,sunk:r,shipLength:a}})(a),[l,o]=r;for(let t=0;t<a;t++)if(null!==e[l+t][o])throw new Error("Cannot place ship on an occupied spot");for(let t=0;t<a;t++)e[l+t][o]=c;t.push(c)};return(()=>{for(let t=0;t<10;t++){e[t]=[];for(let r=0;r<10;r++)e[t][r]=null}})(),{placeShip:c,grid:e,ships:t,receiveAttack:t=>{const[c,l]=t;null===e[c][l]?(r.push([c,l]),e[c][l]=0):(e[c][l].hit(),a.push([c,l]))},placeRandomShips:()=>{const e=[5,4,3,3,2];for(let t=0;t<e.length;t++){let r=!1;for(;!r;){let a=Math.floor(10*Math.random()),l=Math.floor(10*Math.random());try{c([a,l],e[t]),r=!0}catch(e){}}}return t},missedAttacks:r,successfulAttacks:a,allShipsSunk:()=>t.every((e=>e.isSunk())),isValidAttack:e=>{let[t,c]=e;for(let[e,r]of a)if(e===t&&r===c)return!1;for(const[e,a]of r)if(e===t&&a===c)return!1;return!0},getShips:()=>t,getGrid:()=>e}},r=e("human"),a=e("computer"),c=t(),l=t(),o=((e,t,r,a)=>{const c=[5,4,3,3,2];let l=0;const o=t=>{const r=t.target.getAttribute("data-coordinate"),[a,s]=JSON.parse(r);e.placeShip([a,s],c[l]);for(let e=0;e<c[l];e++)document.querySelector(`.cell[data-coordinate="[${a+e}, ${s}]"]`).className="ship-cell";l++,l>=c.length&&document.querySelector(".pre-board").removeEventListener("click",o)},s=()=>{const e=document.querySelectorAll(".pre-board .ship-cell"),t=document.querySelectorAll(".human .cell"),r=[];for(let t=0;t<e.length;t++)r.push(e[t].getAttribute("data-coordinate"));for(let e=0;e<t.length;e++){let a=t[e],c=t[e].getAttribute("data-coordinate");r.includes(c)&&(a.className="ship-cell")}},n=e=>{const a=e.target,c=a.getAttribute("data-coordinate"),[l,o]=JSON.parse(c);r.attack([l,o],t),0===t.getGrid()[l][o]?a.className="miss":a.className="hit"};return{createCells:e=>{const t=document.querySelector(e);t.style.gridTemplateColumns="repeat(10, 1fr)",t.style.gridTemplateRows="repeat(10, 1fr)";for(let e=0;e<100;e++){let r=document.createElement("div");r.className="cell";const a=e%10,c=Math.floor(e/10);r.setAttribute("data-coordinate",`[${a}, ${c}]`),t.insertAdjacentElement("beforeend",r)}},insertShip:()=>{document.querySelector(".pre-board").addEventListener("click",o)},closeModal:()=>{const e=document.querySelector(".begin"),t=document.querySelector(".welcomeScreen");e.addEventListener("click",(()=>{t.close(),s()}))},showShips:s,showAttack:()=>{document.querySelector(".computer").addEventListener("click",n)},aiAttack:()=>{let t=a.attack(e);const[r,c]=t,l=e.getGrid(),o=document.querySelector(`.human .cell[data-coordinate="[${r}, ${c}]"`);0===l[r][c]?o.className="miss":o.className="hit"}}})(c,l,r,a);o.createCells(".pre-board"),o.createCells(".human"),o.createCells(".computer"),l.placeRandomShips(),o.insertShip(),o.closeModal(),o.showAttack()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,